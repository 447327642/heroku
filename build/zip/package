#!/usr/bin/env ruby

project_root = ARGV.shift
package_file = ARGV.shift

unless project_root && package_file
  puts "usage: deb/package PROJECT_ROOT PACKAGE_FILE"
  exit 1
end

require "erb"
require "fileutils"
require "tmpdir"

resources = File.expand_path("../resources", __FILE__)
version = package_file.match(/heroku-([a-z0-9\.]+)\./)[1]

unless File.exists?("pkg/heroku-#{version}.tgz")
  puts "must package tgz first"
  exit 1
end

require "zip/zip"

Dir.mktmpdir do |dir|
  Dir.chdir(dir) do
    system %{ tar -xzvf #{project_root}/pkg/heroku-#{version}.tgz }

    system %{ mkdir -p heroku-client/bin }
    system %{ rm heroku-client/heroku }

    File.open("heroku-client/bin/heroku", "w") do |file|
      file.puts <<-END
#!/usr/bin/env ruby

require "pathname"
bin_file = Pathname.new(__FILE__).realpath

gem_dir = File.expand_path("../../vendor/gems", bin_file)
Dir["\#{gem_dir}/**/lib"].each do |libdir|
$:.unshift libdir
end

$:.unshift File.expand_path("../../lib", bin_file)

require 'heroku'
require 'heroku/command'

args = ARGV.dup
ARGV.clear
command = args.shift.strip rescue 'help'

Heroku::Command.load
Heroku::Command.run(command, args)
      END
    end
    system %{ chmod +x heroku-client/bin/heroku }

    Dir.chdir("heroku-client") do
      Zip::ZipFile.open("#{project_root}/#{package_file}", Zip::ZipFile::CREATE) do |zip|
        Dir["{bin,data,lib,vendor}/**/*"].each do |file|
          zip.add(file, file) { true }
        end
      end
    end
  end
end
