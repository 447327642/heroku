#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.dirname(__FILE__) + '/../lib')

require 'heroku'
require 'heroku/command_line'

usage = <<EOTXT
=== Heroku Commands
  list - list your apps
  create [<name>] - create a new app
  destroy <app> - destroy the app permanently
  keys - manage your user's ssh public keys for git access
    --add [<path to keyfile>]
    --remove <keyname or all>

=== Heroku App-specific Commands
  (cd to the app dir or inform the app with the --app parameter before using)

  info - show app info, like web url and git repo
  update - update the app
    --name <newname>
    --public (true|false)
    --mode (production|development)
  sharing - manage collaborators
    --add <email>
    --remove <email>
    --access (edit|view)
  domains - manage domain names
    --add <domain>
    --remove <domain>
    --remove-all
  rake <command> - remotely execute a rake command
  console <command> - remotely execute a single console command
  console - start an interactive console to the remote app
  restart - restart app servers
  logs - fetch recent log output for debugging
  bundle:capture [<bundle>] - capture a bundle of the app's code and data
  bundle:destroy <bundle> - destroy the specified bundle
  bundle:download - download most recent app bundle as a tarball
  bundle:download <bundle> - download the named bundle
  bundle:animate <bundle> - animate a bundle into a new app
  bundle:list - list bundles for the app

Example story:
  rails myapp
  cd myapp
  (...make edits...)
  git add .
  git commit -m "my new app"
  heroku create myapp
  git remote add heroku git@heroku.com:myapp.git
  git push heroku master
EOTXT

command = ARGV.shift.strip.gsub(/:/, '_') rescue ""
if command.length == 0
	puts usage
	exit 1
end

cli = Heroku::CommandLine.new
unless cli.methods.include? command
	puts "no such method as #{command}, run without arguments for usage"
	exit 2
end

cli.execute(command, ARGV)

